/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.order.service.coreapi.events.order;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class OrderCreatedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2276891758967226980L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrderCreatedEvent\",\"namespace\":\"com.order.service.coreapi.events.order\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"},\"doc\":\"Unique identifier for the order\"},{\"name\":\"products\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OrderProductState\",\"fields\":[{\"name\":\"productId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"price\",\"type\":\"double\",\"default\":0},{\"name\":\"sellerId\",\"type\":\"long\"},{\"name\":\"categoryId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"inventoryCount\",\"type\":\"int\",\"default\":0},{\"name\":\"quantity\",\"type\":\"int\",\"default\":0},{\"name\":\"createdAt\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"date\"}],\"default\":null},{\"name\":\"updatedAt\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"date\"}],\"default\":null},{\"name\":\"deletedAt\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"date\"}],\"default\":null}]}}},{\"name\":\"paymentMethodId\",\"type\":\"long\",\"doc\":\"Payment method used for the order\"},{\"name\":\"totalPrice\",\"type\":\"double\",\"doc\":\"Total price of the order\"},{\"name\":\"createdAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"doc\":\"Date the order was created\"},{\"name\":\"updatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"doc\":\"Date the order was last updated\",\"default\":null},{\"name\":\"buyerId\",\"type\":\"long\",\"doc\":\"ID of the buyer\"},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"OrderStatus\",\"symbols\":[\"PENDING\",\"APPROVED\",\"CANCELED\",\"SHIPPED\",\"DELIVERED\"]}},{\"name\":\"weight\",\"type\":\"double\",\"doc\":\"Weight of the order\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<OrderCreatedEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OrderCreatedEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<OrderCreatedEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<OrderCreatedEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<OrderCreatedEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this OrderCreatedEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a OrderCreatedEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a OrderCreatedEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static OrderCreatedEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique identifier for the order */
  private java.util.UUID id;
  private java.util.List<com.order.service.coreapi.events.order.OrderProductState> products;
  /** Payment method used for the order */
  private long paymentMethod;
  /** Total price of the order */
  private double totalPrice;
  /** Date the order was created */
  private java.time.Instant createdAt;
  /** Date the order was last updated */
  private java.time.Instant updatedAt;
  /** ID of the buyer */
  private long buyerId;
  private com.order.service.coreapi.events.order.OrderStatus status;
  /** Weight of the order */
  private double weight;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OrderCreatedEvent() {}

  /**
   * All-args constructor.
   * @param id Unique identifier for the order
   * @param products The new value for products
   * @param paymentMethod Payment method used for the order
   * @param totalPrice Total price of the order
   * @param createdAt Date the order was created
   * @param updatedAt Date the order was last updated
   * @param buyerId ID of the buyer
   * @param status The new value for status
   * @param weight Weight of the order
   */
  public OrderCreatedEvent(java.util.UUID id, java.util.List<com.order.service.coreapi.events.order.OrderProductState> products, java.lang.Long paymentMethod, java.lang.Double totalPrice, java.time.Instant createdAt, java.time.Instant updatedAt, java.lang.Long buyerId, com.order.service.coreapi.events.order.OrderStatus status, java.lang.Double weight) {
    this.id = id;
    this.products = products;
    this.paymentMethod = paymentMethod;
    this.totalPrice = totalPrice;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.buyerId = buyerId;
    this.status = status;
    this.weight = weight;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return products;
    case 2: return paymentMethod;
    case 3: return totalPrice;
    case 4: return createdAt;
    case 5: return updatedAt;
    case 6: return buyerId;
    case 7: return status;
    case 8: return weight;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.util.UUID)value$; break;
    case 1: products = (java.util.List<com.order.service.coreapi.events.order.OrderProductState>)value$; break;
    case 2: paymentMethod = (java.lang.Long)value$; break;
    case 3: totalPrice = (java.lang.Double)value$; break;
    case 4: createdAt = (java.time.Instant)value$; break;
    case 5: updatedAt = (java.time.Instant)value$; break;
    case 6: buyerId = (java.lang.Long)value$; break;
    case 7: status = (com.order.service.coreapi.events.order.OrderStatus)value$; break;
    case 8: weight = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Unique identifier for the order
   */
  public java.util.UUID getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * Unique identifier for the order
   * @param value the value to set.
   */
  public void setId(java.util.UUID value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'products' field.
   * @return The value of the 'products' field.
   */
  public java.util.List<com.order.service.coreapi.events.order.OrderProductState> getProducts() {
    return products;
  }


  /**
   * Sets the value of the 'products' field.
   * @param value the value to set.
   */
  public void setProducts(java.util.List<com.order.service.coreapi.events.order.OrderProductState> value) {
    this.products = value;
  }

  /**
   * Gets the value of the 'paymentMethodId' field.
   * @return Payment method used for the order
   */
  public long getPaymentMethod() {
    return paymentMethod;
  }


  /**
   * Sets the value of the 'paymentMethodId' field.
   * Payment method used for the order
   * @param value the value to set.
   */
  public void setPaymentMethod(long value) {
    this.paymentMethod = value;
  }

  /**
   * Gets the value of the 'totalPrice' field.
   * @return Total price of the order
   */
  public double getTotalPrice() {
    return totalPrice;
  }


  /**
   * Sets the value of the 'totalPrice' field.
   * Total price of the order
   * @param value the value to set.
   */
  public void setTotalPrice(double value) {
    this.totalPrice = value;
  }

  /**
   * Gets the value of the 'createdAt' field.
   * @return Date the order was created
   */
  public java.time.Instant getCreatedAt() {
    return createdAt;
  }


  /**
   * Sets the value of the 'createdAt' field.
   * Date the order was created
   * @param value the value to set.
   */
  public void setCreatedAt(java.time.Instant value) {
    this.createdAt = value;
  }

  /**
   * Gets the value of the 'updatedAt' field.
   * @return Date the order was last updated
   */
  public java.time.Instant getUpdatedAt() {
    return updatedAt;
  }


  /**
   * Sets the value of the 'updatedAt' field.
   * Date the order was last updated
   * @param value the value to set.
   */
  public void setUpdatedAt(java.time.Instant value) {
    this.updatedAt = value;
  }

  /**
   * Gets the value of the 'buyerId' field.
   * @return ID of the buyer
   */
  public long getBuyerId() {
    return buyerId;
  }


  /**
   * Sets the value of the 'buyerId' field.
   * ID of the buyer
   * @param value the value to set.
   */
  public void setBuyerId(long value) {
    this.buyerId = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public com.order.service.coreapi.events.order.OrderStatus getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(com.order.service.coreapi.events.order.OrderStatus value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'weight' field.
   * @return Weight of the order
   */
  public double getWeight() {
    return weight;
  }


  /**
   * Sets the value of the 'weight' field.
   * Weight of the order
   * @param value the value to set.
   */
  public void setWeight(double value) {
    this.weight = value;
  }

  /**
   * Creates a new OrderCreatedEvent RecordBuilder.
   * @return A new OrderCreatedEvent RecordBuilder
   */
  public static com.order.service.coreapi.events.order.OrderCreatedEvent.Builder newBuilder() {
    return new com.order.service.coreapi.events.order.OrderCreatedEvent.Builder();
  }

  /**
   * Creates a new OrderCreatedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OrderCreatedEvent RecordBuilder
   */
  public static com.order.service.coreapi.events.order.OrderCreatedEvent.Builder newBuilder(com.order.service.coreapi.events.order.OrderCreatedEvent.Builder other) {
    if (other == null) {
      return new com.order.service.coreapi.events.order.OrderCreatedEvent.Builder();
    } else {
      return new com.order.service.coreapi.events.order.OrderCreatedEvent.Builder(other);
    }
  }

  /**
   * Creates a new OrderCreatedEvent RecordBuilder by copying an existing OrderCreatedEvent instance.
   * @param other The existing instance to copy.
   * @return A new OrderCreatedEvent RecordBuilder
   */
  public static com.order.service.coreapi.events.order.OrderCreatedEvent.Builder newBuilder(com.order.service.coreapi.events.order.OrderCreatedEvent other) {
    if (other == null) {
      return new com.order.service.coreapi.events.order.OrderCreatedEvent.Builder();
    } else {
      return new com.order.service.coreapi.events.order.OrderCreatedEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for OrderCreatedEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrderCreatedEvent>
    implements org.apache.avro.data.RecordBuilder<OrderCreatedEvent> {

    /** Unique identifier for the order */
    private java.util.UUID id;
    private java.util.List<com.order.service.coreapi.events.order.OrderProductState> products;
    /** Payment method used for the order */
    private long paymentMethod;
    /** Total price of the order */
    private double totalPrice;
    /** Date the order was created */
    private java.time.Instant createdAt;
    /** Date the order was last updated */
    private java.time.Instant updatedAt;
    /** ID of the buyer */
    private long buyerId;
    private com.order.service.coreapi.events.order.OrderStatus status;
    /** Weight of the order */
    private double weight;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.order.service.coreapi.events.order.OrderCreatedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.products)) {
        this.products = data().deepCopy(fields()[1].schema(), other.products);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.paymentMethod)) {
        this.paymentMethod = data().deepCopy(fields()[2].schema(), other.paymentMethod);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.totalPrice)) {
        this.totalPrice = data().deepCopy(fields()[3].schema(), other.totalPrice);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[4].schema(), other.createdAt);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[5].schema(), other.updatedAt);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.buyerId)) {
        this.buyerId = data().deepCopy(fields()[6].schema(), other.buyerId);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.status)) {
        this.status = data().deepCopy(fields()[7].schema(), other.status);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.weight)) {
        this.weight = data().deepCopy(fields()[8].schema(), other.weight);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing OrderCreatedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.order.service.coreapi.events.order.OrderCreatedEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.products)) {
        this.products = data().deepCopy(fields()[1].schema(), other.products);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.paymentMethod)) {
        this.paymentMethod = data().deepCopy(fields()[2].schema(), other.paymentMethod);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.totalPrice)) {
        this.totalPrice = data().deepCopy(fields()[3].schema(), other.totalPrice);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[4].schema(), other.createdAt);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[5].schema(), other.updatedAt);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.buyerId)) {
        this.buyerId = data().deepCopy(fields()[6].schema(), other.buyerId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.status)) {
        this.status = data().deepCopy(fields()[7].schema(), other.status);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.weight)) {
        this.weight = data().deepCopy(fields()[8].schema(), other.weight);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * Unique identifier for the order
      * @return The value.
      */
    public java.util.UUID getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * Unique identifier for the order
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.order.service.coreapi.events.order.OrderCreatedEvent.Builder setId(java.util.UUID value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Unique identifier for the order
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Unique identifier for the order
      * @return This builder.
      */
    public com.order.service.coreapi.events.order.OrderCreatedEvent.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'products' field.
      * @return The value.
      */
    public java.util.List<com.order.service.coreapi.events.order.OrderProductState> getProducts() {
      return products;
    }


    /**
      * Sets the value of the 'products' field.
      * @param value The value of 'products'.
      * @return This builder.
      */
    public com.order.service.coreapi.events.order.OrderCreatedEvent.Builder setProducts(java.util.List<com.order.service.coreapi.events.order.OrderProductState> value) {
      validate(fields()[1], value);
      this.products = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'products' field has been set.
      * @return True if the 'products' field has been set, false otherwise.
      */
    public boolean hasProducts() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'products' field.
      * @return This builder.
      */
    public com.order.service.coreapi.events.order.OrderCreatedEvent.Builder clearProducts() {
      products = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentMethodId' field.
      * Payment method used for the order
      * @return The value.
      */
    public long getPaymentMethod() {
      return paymentMethod;
    }


    /**
      * Sets the value of the 'paymentMethodId' field.
      * Payment method used for the order
      * @param value The value of 'paymentMethodId'.
      * @return This builder.
      */
    public com.order.service.coreapi.events.order.OrderCreatedEvent.Builder setPaymentMethod(long value) {
      validate(fields()[2], value);
      this.paymentMethod = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentMethodId' field has been set.
      * Payment method used for the order
      * @return True if the 'paymentMethodId' field has been set, false otherwise.
      */
    public boolean hasPaymentMethod() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'paymentMethodId' field.
      * Payment method used for the order
      * @return This builder.
      */
    public com.order.service.coreapi.events.order.OrderCreatedEvent.Builder clearPaymentMethod() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalPrice' field.
      * Total price of the order
      * @return The value.
      */
    public double getTotalPrice() {
      return totalPrice;
    }


    /**
      * Sets the value of the 'totalPrice' field.
      * Total price of the order
      * @param value The value of 'totalPrice'.
      * @return This builder.
      */
    public com.order.service.coreapi.events.order.OrderCreatedEvent.Builder setTotalPrice(double value) {
      validate(fields()[3], value);
      this.totalPrice = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'totalPrice' field has been set.
      * Total price of the order
      * @return True if the 'totalPrice' field has been set, false otherwise.
      */
    public boolean hasTotalPrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'totalPrice' field.
      * Total price of the order
      * @return This builder.
      */
    public com.order.service.coreapi.events.order.OrderCreatedEvent.Builder clearTotalPrice() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * Date the order was created
      * @return The value.
      */
    public java.time.Instant getCreatedAt() {
      return createdAt;
    }


    /**
      * Sets the value of the 'createdAt' field.
      * Date the order was created
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public com.order.service.coreapi.events.order.OrderCreatedEvent.Builder setCreatedAt(java.time.Instant value) {
      validate(fields()[4], value);
      this.createdAt = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * Date the order was created
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * Date the order was created
      * @return This builder.
      */
    public com.order.service.coreapi.events.order.OrderCreatedEvent.Builder clearCreatedAt() {
      createdAt = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'updatedAt' field.
      * Date the order was last updated
      * @return The value.
      */
    public java.time.Instant getUpdatedAt() {
      return updatedAt;
    }


    /**
      * Sets the value of the 'updatedAt' field.
      * Date the order was last updated
      * @param value The value of 'updatedAt'.
      * @return This builder.
      */
    public com.order.service.coreapi.events.order.OrderCreatedEvent.Builder setUpdatedAt(java.time.Instant value) {
      validate(fields()[5], value);
      this.updatedAt = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'updatedAt' field has been set.
      * Date the order was last updated
      * @return True if the 'updatedAt' field has been set, false otherwise.
      */
    public boolean hasUpdatedAt() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'updatedAt' field.
      * Date the order was last updated
      * @return This builder.
      */
    public com.order.service.coreapi.events.order.OrderCreatedEvent.Builder clearUpdatedAt() {
      updatedAt = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'buyerId' field.
      * ID of the buyer
      * @return The value.
      */
    public long getBuyerId() {
      return buyerId;
    }


    /**
      * Sets the value of the 'buyerId' field.
      * ID of the buyer
      * @param value The value of 'buyerId'.
      * @return This builder.
      */
    public com.order.service.coreapi.events.order.OrderCreatedEvent.Builder setBuyerId(long value) {
      validate(fields()[6], value);
      this.buyerId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'buyerId' field has been set.
      * ID of the buyer
      * @return True if the 'buyerId' field has been set, false otherwise.
      */
    public boolean hasBuyerId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'buyerId' field.
      * ID of the buyer
      * @return This builder.
      */
    public com.order.service.coreapi.events.order.OrderCreatedEvent.Builder clearBuyerId() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public com.order.service.coreapi.events.order.OrderStatus getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.order.service.coreapi.events.order.OrderCreatedEvent.Builder setStatus(com.order.service.coreapi.events.order.OrderStatus value) {
      validate(fields()[7], value);
      this.status = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.order.service.coreapi.events.order.OrderCreatedEvent.Builder clearStatus() {
      status = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'weight' field.
      * Weight of the order
      * @return The value.
      */
    public double getWeight() {
      return weight;
    }


    /**
      * Sets the value of the 'weight' field.
      * Weight of the order
      * @param value The value of 'weight'.
      * @return This builder.
      */
    public com.order.service.coreapi.events.order.OrderCreatedEvent.Builder setWeight(double value) {
      validate(fields()[8], value);
      this.weight = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'weight' field has been set.
      * Weight of the order
      * @return True if the 'weight' field has been set, false otherwise.
      */
    public boolean hasWeight() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'weight' field.
      * Weight of the order
      * @return This builder.
      */
    public com.order.service.coreapi.events.order.OrderCreatedEvent.Builder clearWeight() {
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OrderCreatedEvent build() {
      try {
        OrderCreatedEvent record = new OrderCreatedEvent();
        record.id = fieldSetFlags()[0] ? this.id : (java.util.UUID) defaultValue(fields()[0]);
        record.products = fieldSetFlags()[1] ? this.products : (java.util.List<com.order.service.coreapi.events.order.OrderProductState>) defaultValue(fields()[1]);
        record.paymentMethod = fieldSetFlags()[2] ? this.paymentMethod : (java.lang.Long) defaultValue(fields()[2]);
        record.totalPrice = fieldSetFlags()[3] ? this.totalPrice : (java.lang.Double) defaultValue(fields()[3]);
        record.createdAt = fieldSetFlags()[4] ? this.createdAt : (java.time.Instant) defaultValue(fields()[4]);
        record.updatedAt = fieldSetFlags()[5] ? this.updatedAt : (java.time.Instant) defaultValue(fields()[5]);
        record.buyerId = fieldSetFlags()[6] ? this.buyerId : (java.lang.Long) defaultValue(fields()[6]);
        record.status = fieldSetFlags()[7] ? this.status : (com.order.service.coreapi.events.order.OrderStatus) defaultValue(fields()[7]);
        record.weight = fieldSetFlags()[8] ? this.weight : (java.lang.Double) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OrderCreatedEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<OrderCreatedEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OrderCreatedEvent>
    READER$ = (org.apache.avro.io.DatumReader<OrderCreatedEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










