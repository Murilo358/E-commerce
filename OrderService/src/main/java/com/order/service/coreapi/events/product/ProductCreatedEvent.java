/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.order.service.coreapi.events.product;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ProductCreatedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6306798093569266001L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ProductCreatedEvent\",\"namespace\":\"com.order.service.coreapi.events.product\",\"fields\":[{\"name\":\"productId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"price\",\"type\":\"double\"},{\"name\":\"sellerId\",\"type\":\"long\"},{\"name\":\"categoryId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"inventoryCount\",\"type\":\"int\"},{\"name\":\"createdAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}]},{\"name\":\"updatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}]}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<ProductCreatedEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ProductCreatedEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ProductCreatedEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ProductCreatedEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ProductCreatedEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ProductCreatedEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ProductCreatedEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ProductCreatedEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ProductCreatedEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID productId;
  private java.lang.String name;
  private java.lang.String description;
  private double price;
  private long sellerId;
  private java.util.UUID categoryId;
  private int inventoryCount;
  private java.time.Instant createdAt;
  private java.time.Instant updatedAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ProductCreatedEvent() {}

  /**
   * All-args constructor.
   * @param productId The new value for productId
   * @param name The new value for name
   * @param description The new value for description
   * @param price The new value for price
   * @param sellerId The new value for sellerId
   * @param categoryId The new value for categoryId
   * @param inventoryCount The new value for inventoryCount
   * @param createdAt The new value for createdAt
   * @param updatedAt The new value for updatedAt
   */
  public ProductCreatedEvent(java.util.UUID productId, java.lang.String name, java.lang.String description, java.lang.Double price, java.lang.Long sellerId, java.util.UUID categoryId, java.lang.Integer inventoryCount, java.time.Instant createdAt, java.time.Instant updatedAt) {
    this.productId = productId;
    this.name = name;
    this.description = description;
    this.price = price;
    this.sellerId = sellerId;
    this.categoryId = categoryId;
    this.inventoryCount = inventoryCount;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return productId;
    case 1: return name;
    case 2: return description;
    case 3: return price;
    case 4: return sellerId;
    case 5: return categoryId;
    case 6: return inventoryCount;
    case 7: return createdAt;
    case 8: return updatedAt;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      null,
      null,
      null,
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: productId = (java.util.UUID)value$; break;
    case 1: name = value$ != null ? value$.toString() : null; break;
    case 2: description = value$ != null ? value$.toString() : null; break;
    case 3: price = (java.lang.Double)value$; break;
    case 4: sellerId = (java.lang.Long)value$; break;
    case 5: categoryId = (java.util.UUID)value$; break;
    case 6: inventoryCount = (java.lang.Integer)value$; break;
    case 7: createdAt = (java.time.Instant)value$; break;
    case 8: updatedAt = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'productId' field.
   * @return The value of the 'productId' field.
   */
  public java.util.UUID getProductId() {
    return productId;
  }


  /**
   * Sets the value of the 'productId' field.
   * @param value the value to set.
   */
  public void setProductId(java.util.UUID value) {
    this.productId = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.String getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public double getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(double value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'sellerId' field.
   * @return The value of the 'sellerId' field.
   */
  public long getSellerId() {
    return sellerId;
  }


  /**
   * Sets the value of the 'sellerId' field.
   * @param value the value to set.
   */
  public void setSellerId(long value) {
    this.sellerId = value;
  }

  /**
   * Gets the value of the 'categoryId' field.
   * @return The value of the 'categoryId' field.
   */
  public java.util.UUID getCategoryId() {
    return categoryId;
  }


  /**
   * Sets the value of the 'categoryId' field.
   * @param value the value to set.
   */
  public void setCategoryId(java.util.UUID value) {
    this.categoryId = value;
  }

  /**
   * Gets the value of the 'inventoryCount' field.
   * @return The value of the 'inventoryCount' field.
   */
  public int getInventoryCount() {
    return inventoryCount;
  }


  /**
   * Sets the value of the 'inventoryCount' field.
   * @param value the value to set.
   */
  public void setInventoryCount(int value) {
    this.inventoryCount = value;
  }

  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public java.time.Instant getCreatedAt() {
    return createdAt;
  }


  /**
   * Sets the value of the 'createdAt' field.
   * @param value the value to set.
   */
  public void setCreatedAt(java.time.Instant value) {
    this.createdAt = value;
  }

  /**
   * Gets the value of the 'updatedAt' field.
   * @return The value of the 'updatedAt' field.
   */
  public java.time.Instant getUpdatedAt() {
    return updatedAt;
  }


  /**
   * Sets the value of the 'updatedAt' field.
   * @param value the value to set.
   */
  public void setUpdatedAt(java.time.Instant value) {
    this.updatedAt = value;
  }

  /**
   * Creates a new ProductCreatedEvent RecordBuilder.
   * @return A new ProductCreatedEvent RecordBuilder
   */
  public static com.order.service.coreapi.events.product.ProductCreatedEvent.Builder newBuilder() {
    return new com.order.service.coreapi.events.product.ProductCreatedEvent.Builder();
  }

  /**
   * Creates a new ProductCreatedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ProductCreatedEvent RecordBuilder
   */
  public static com.order.service.coreapi.events.product.ProductCreatedEvent.Builder newBuilder(com.order.service.coreapi.events.product.ProductCreatedEvent.Builder other) {
    if (other == null) {
      return new com.order.service.coreapi.events.product.ProductCreatedEvent.Builder();
    } else {
      return new com.order.service.coreapi.events.product.ProductCreatedEvent.Builder(other);
    }
  }

  /**
   * Creates a new ProductCreatedEvent RecordBuilder by copying an existing ProductCreatedEvent instance.
   * @param other The existing instance to copy.
   * @return A new ProductCreatedEvent RecordBuilder
   */
  public static com.order.service.coreapi.events.product.ProductCreatedEvent.Builder newBuilder(com.order.service.coreapi.events.product.ProductCreatedEvent other) {
    if (other == null) {
      return new com.order.service.coreapi.events.product.ProductCreatedEvent.Builder();
    } else {
      return new com.order.service.coreapi.events.product.ProductCreatedEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for ProductCreatedEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ProductCreatedEvent>
    implements org.apache.avro.data.RecordBuilder<ProductCreatedEvent> {

    private java.util.UUID productId;
    private java.lang.String name;
    private java.lang.String description;
    private double price;
    private long sellerId;
    private java.util.UUID categoryId;
    private int inventoryCount;
    private java.time.Instant createdAt;
    private java.time.Instant updatedAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.order.service.coreapi.events.product.ProductCreatedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.productId)) {
        this.productId = data().deepCopy(fields()[0].schema(), other.productId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.sellerId)) {
        this.sellerId = data().deepCopy(fields()[4].schema(), other.sellerId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.categoryId)) {
        this.categoryId = data().deepCopy(fields()[5].schema(), other.categoryId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.inventoryCount)) {
        this.inventoryCount = data().deepCopy(fields()[6].schema(), other.inventoryCount);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[7].schema(), other.createdAt);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[8].schema(), other.updatedAt);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing ProductCreatedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.order.service.coreapi.events.product.ProductCreatedEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.productId)) {
        this.productId = data().deepCopy(fields()[0].schema(), other.productId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sellerId)) {
        this.sellerId = data().deepCopy(fields()[4].schema(), other.sellerId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.categoryId)) {
        this.categoryId = data().deepCopy(fields()[5].schema(), other.categoryId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.inventoryCount)) {
        this.inventoryCount = data().deepCopy(fields()[6].schema(), other.inventoryCount);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[7].schema(), other.createdAt);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[8].schema(), other.updatedAt);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'productId' field.
      * @return The value.
      */
    public java.util.UUID getProductId() {
      return productId;
    }


    /**
      * Sets the value of the 'productId' field.
      * @param value The value of 'productId'.
      * @return This builder.
      */
    public com.order.service.coreapi.events.product.ProductCreatedEvent.Builder setProductId(java.util.UUID value) {
      validate(fields()[0], value);
      this.productId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'productId' field has been set.
      * @return True if the 'productId' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'productId' field.
      * @return This builder.
      */
    public com.order.service.coreapi.events.product.ProductCreatedEvent.Builder clearProductId() {
      productId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.order.service.coreapi.events.product.ProductCreatedEvent.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.order.service.coreapi.events.product.ProductCreatedEvent.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.order.service.coreapi.events.product.ProductCreatedEvent.Builder setDescription(java.lang.String value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public com.order.service.coreapi.events.product.ProductCreatedEvent.Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public double getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.order.service.coreapi.events.product.ProductCreatedEvent.Builder setPrice(double value) {
      validate(fields()[3], value);
      this.price = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.order.service.coreapi.events.product.ProductCreatedEvent.Builder clearPrice() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'sellerId' field.
      * @return The value.
      */
    public long getSellerId() {
      return sellerId;
    }


    /**
      * Sets the value of the 'sellerId' field.
      * @param value The value of 'sellerId'.
      * @return This builder.
      */
    public com.order.service.coreapi.events.product.ProductCreatedEvent.Builder setSellerId(long value) {
      validate(fields()[4], value);
      this.sellerId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'sellerId' field has been set.
      * @return True if the 'sellerId' field has been set, false otherwise.
      */
    public boolean hasSellerId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'sellerId' field.
      * @return This builder.
      */
    public com.order.service.coreapi.events.product.ProductCreatedEvent.Builder clearSellerId() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'categoryId' field.
      * @return The value.
      */
    public java.util.UUID getCategoryId() {
      return categoryId;
    }


    /**
      * Sets the value of the 'categoryId' field.
      * @param value The value of 'categoryId'.
      * @return This builder.
      */
    public com.order.service.coreapi.events.product.ProductCreatedEvent.Builder setCategoryId(java.util.UUID value) {
      validate(fields()[5], value);
      this.categoryId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'categoryId' field has been set.
      * @return True if the 'categoryId' field has been set, false otherwise.
      */
    public boolean hasCategoryId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'categoryId' field.
      * @return This builder.
      */
    public com.order.service.coreapi.events.product.ProductCreatedEvent.Builder clearCategoryId() {
      categoryId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'inventoryCount' field.
      * @return The value.
      */
    public int getInventoryCount() {
      return inventoryCount;
    }


    /**
      * Sets the value of the 'inventoryCount' field.
      * @param value The value of 'inventoryCount'.
      * @return This builder.
      */
    public com.order.service.coreapi.events.product.ProductCreatedEvent.Builder setInventoryCount(int value) {
      validate(fields()[6], value);
      this.inventoryCount = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'inventoryCount' field has been set.
      * @return True if the 'inventoryCount' field has been set, false otherwise.
      */
    public boolean hasInventoryCount() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'inventoryCount' field.
      * @return This builder.
      */
    public com.order.service.coreapi.events.product.ProductCreatedEvent.Builder clearInventoryCount() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public java.time.Instant getCreatedAt() {
      return createdAt;
    }


    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public com.order.service.coreapi.events.product.ProductCreatedEvent.Builder setCreatedAt(java.time.Instant value) {
      validate(fields()[7], value);
      this.createdAt = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public com.order.service.coreapi.events.product.ProductCreatedEvent.Builder clearCreatedAt() {
      createdAt = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'updatedAt' field.
      * @return The value.
      */
    public java.time.Instant getUpdatedAt() {
      return updatedAt;
    }


    /**
      * Sets the value of the 'updatedAt' field.
      * @param value The value of 'updatedAt'.
      * @return This builder.
      */
    public com.order.service.coreapi.events.product.ProductCreatedEvent.Builder setUpdatedAt(java.time.Instant value) {
      validate(fields()[8], value);
      this.updatedAt = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'updatedAt' field has been set.
      * @return True if the 'updatedAt' field has been set, false otherwise.
      */
    public boolean hasUpdatedAt() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'updatedAt' field.
      * @return This builder.
      */
    public com.order.service.coreapi.events.product.ProductCreatedEvent.Builder clearUpdatedAt() {
      updatedAt = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ProductCreatedEvent build() {
      try {
        ProductCreatedEvent record = new ProductCreatedEvent();
        record.productId = fieldSetFlags()[0] ? this.productId : (java.util.UUID) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        record.description = fieldSetFlags()[2] ? this.description : (java.lang.String) defaultValue(fields()[2]);
        record.price = fieldSetFlags()[3] ? this.price : (java.lang.Double) defaultValue(fields()[3]);
        record.sellerId = fieldSetFlags()[4] ? this.sellerId : (java.lang.Long) defaultValue(fields()[4]);
        record.categoryId = fieldSetFlags()[5] ? this.categoryId : (java.util.UUID) defaultValue(fields()[5]);
        record.inventoryCount = fieldSetFlags()[6] ? this.inventoryCount : (java.lang.Integer) defaultValue(fields()[6]);
        record.createdAt = fieldSetFlags()[7] ? this.createdAt : (java.time.Instant) defaultValue(fields()[7]);
        record.updatedAt = fieldSetFlags()[8] ? this.updatedAt : (java.time.Instant) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ProductCreatedEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<ProductCreatedEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ProductCreatedEvent>
    READER$ = (org.apache.avro.io.DatumReader<ProductCreatedEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










