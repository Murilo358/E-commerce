/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.product.service.coreapi.events.product;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ProductInventoryUpdatedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6028921116726886083L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ProductInventoryUpdatedEvent\",\"namespace\":\"com.product.service.coreapi.events.product\",\"fields\":[{\"name\":\"inventoryCount\",\"type\":\"int\"},{\"name\":\"productId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"updatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<ProductInventoryUpdatedEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ProductInventoryUpdatedEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ProductInventoryUpdatedEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ProductInventoryUpdatedEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ProductInventoryUpdatedEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ProductInventoryUpdatedEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ProductInventoryUpdatedEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ProductInventoryUpdatedEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ProductInventoryUpdatedEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int inventoryCount;
  private java.util.UUID productId;
  private java.time.Instant updatedAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ProductInventoryUpdatedEvent() {}

  /**
   * All-args constructor.
   * @param inventoryCount The new value for inventoryCount
   * @param productId The new value for productId
   * @param updatedAt The new value for updatedAt
   */
  public ProductInventoryUpdatedEvent(java.lang.Integer inventoryCount, java.util.UUID productId, java.time.Instant updatedAt) {
    this.inventoryCount = inventoryCount;
    this.productId = productId;
    this.updatedAt = updatedAt;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return inventoryCount;
    case 1: return productId;
    case 2: return updatedAt;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: inventoryCount = (java.lang.Integer)value$; break;
    case 1: productId = (java.util.UUID)value$; break;
    case 2: updatedAt = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'inventoryCount' field.
   * @return The value of the 'inventoryCount' field.
   */
  public int getInventoryCount() {
    return inventoryCount;
  }


  /**
   * Sets the value of the 'inventoryCount' field.
   * @param value the value to set.
   */
  public void setInventoryCount(int value) {
    this.inventoryCount = value;
  }

  /**
   * Gets the value of the 'productId' field.
   * @return The value of the 'productId' field.
   */
  public java.util.UUID getProductId() {
    return productId;
  }


  /**
   * Sets the value of the 'productId' field.
   * @param value the value to set.
   */
  public void setProductId(java.util.UUID value) {
    this.productId = value;
  }

  /**
   * Gets the value of the 'updatedAt' field.
   * @return The value of the 'updatedAt' field.
   */
  public java.time.Instant getUpdatedAt() {
    return updatedAt;
  }


  /**
   * Sets the value of the 'updatedAt' field.
   * @param value the value to set.
   */
  public void setUpdatedAt(java.time.Instant value) {
    this.updatedAt = value;
  }

  /**
   * Creates a new ProductInventoryUpdatedEvent RecordBuilder.
   * @return A new ProductInventoryUpdatedEvent RecordBuilder
   */
  public static com.product.service.coreapi.events.product.ProductInventoryUpdatedEvent.Builder newBuilder() {
    return new com.product.service.coreapi.events.product.ProductInventoryUpdatedEvent.Builder();
  }

  /**
   * Creates a new ProductInventoryUpdatedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ProductInventoryUpdatedEvent RecordBuilder
   */
  public static com.product.service.coreapi.events.product.ProductInventoryUpdatedEvent.Builder newBuilder(com.product.service.coreapi.events.product.ProductInventoryUpdatedEvent.Builder other) {
    if (other == null) {
      return new com.product.service.coreapi.events.product.ProductInventoryUpdatedEvent.Builder();
    } else {
      return new com.product.service.coreapi.events.product.ProductInventoryUpdatedEvent.Builder(other);
    }
  }

  /**
   * Creates a new ProductInventoryUpdatedEvent RecordBuilder by copying an existing ProductInventoryUpdatedEvent instance.
   * @param other The existing instance to copy.
   * @return A new ProductInventoryUpdatedEvent RecordBuilder
   */
  public static com.product.service.coreapi.events.product.ProductInventoryUpdatedEvent.Builder newBuilder(com.product.service.coreapi.events.product.ProductInventoryUpdatedEvent other) {
    if (other == null) {
      return new com.product.service.coreapi.events.product.ProductInventoryUpdatedEvent.Builder();
    } else {
      return new com.product.service.coreapi.events.product.ProductInventoryUpdatedEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for ProductInventoryUpdatedEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ProductInventoryUpdatedEvent>
    implements org.apache.avro.data.RecordBuilder<ProductInventoryUpdatedEvent> {

    private int inventoryCount;
    private java.util.UUID productId;
    private java.time.Instant updatedAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.product.service.coreapi.events.product.ProductInventoryUpdatedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.inventoryCount)) {
        this.inventoryCount = data().deepCopy(fields()[0].schema(), other.inventoryCount);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.productId)) {
        this.productId = data().deepCopy(fields()[1].schema(), other.productId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[2].schema(), other.updatedAt);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing ProductInventoryUpdatedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.product.service.coreapi.events.product.ProductInventoryUpdatedEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.inventoryCount)) {
        this.inventoryCount = data().deepCopy(fields()[0].schema(), other.inventoryCount);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.productId)) {
        this.productId = data().deepCopy(fields()[1].schema(), other.productId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[2].schema(), other.updatedAt);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'inventoryCount' field.
      * @return The value.
      */
    public int getInventoryCount() {
      return inventoryCount;
    }


    /**
      * Sets the value of the 'inventoryCount' field.
      * @param value The value of 'inventoryCount'.
      * @return This builder.
      */
    public com.product.service.coreapi.events.product.ProductInventoryUpdatedEvent.Builder setInventoryCount(int value) {
      validate(fields()[0], value);
      this.inventoryCount = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'inventoryCount' field has been set.
      * @return True if the 'inventoryCount' field has been set, false otherwise.
      */
    public boolean hasInventoryCount() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'inventoryCount' field.
      * @return This builder.
      */
    public com.product.service.coreapi.events.product.ProductInventoryUpdatedEvent.Builder clearInventoryCount() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'productId' field.
      * @return The value.
      */
    public java.util.UUID getProductId() {
      return productId;
    }


    /**
      * Sets the value of the 'productId' field.
      * @param value The value of 'productId'.
      * @return This builder.
      */
    public com.product.service.coreapi.events.product.ProductInventoryUpdatedEvent.Builder setProductId(java.util.UUID value) {
      validate(fields()[1], value);
      this.productId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'productId' field has been set.
      * @return True if the 'productId' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'productId' field.
      * @return This builder.
      */
    public com.product.service.coreapi.events.product.ProductInventoryUpdatedEvent.Builder clearProductId() {
      productId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'updatedAt' field.
      * @return The value.
      */
    public java.time.Instant getUpdatedAt() {
      return updatedAt;
    }


    /**
      * Sets the value of the 'updatedAt' field.
      * @param value The value of 'updatedAt'.
      * @return This builder.
      */
    public com.product.service.coreapi.events.product.ProductInventoryUpdatedEvent.Builder setUpdatedAt(java.time.Instant value) {
      validate(fields()[2], value);
      this.updatedAt = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'updatedAt' field has been set.
      * @return True if the 'updatedAt' field has been set, false otherwise.
      */
    public boolean hasUpdatedAt() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'updatedAt' field.
      * @return This builder.
      */
    public com.product.service.coreapi.events.product.ProductInventoryUpdatedEvent.Builder clearUpdatedAt() {
      updatedAt = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ProductInventoryUpdatedEvent build() {
      try {
        ProductInventoryUpdatedEvent record = new ProductInventoryUpdatedEvent();
        record.inventoryCount = fieldSetFlags()[0] ? this.inventoryCount : (java.lang.Integer) defaultValue(fields()[0]);
        record.productId = fieldSetFlags()[1] ? this.productId : (java.util.UUID) defaultValue(fields()[1]);
        record.updatedAt = fieldSetFlags()[2] ? this.updatedAt : (java.time.Instant) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ProductInventoryUpdatedEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<ProductInventoryUpdatedEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ProductInventoryUpdatedEvent>
    READER$ = (org.apache.avro.io.DatumReader<ProductInventoryUpdatedEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










