services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      # Kafka configurations
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    container_name: schema-registry
    hostname: schema-registry
    ports:
      - "8090:8090"
    depends_on:
      - zookeeper
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8090
    networks:
      - backend

  control-center:
    image: confluentinc/cp-enterprise-control-center:6.0.1
    hostname: control-center
    container_name: control-center
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka:9092
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONTROL_CENTER_COMMAND_TOPIC_REPLICATION: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_INTERNAL_TOPICS_REPLICATION: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 1
      CONTROL_CENTER_MODE_ENABLE: 'all'
      CONTROL_CENTER_CONSUMERS_VIEW_ENABLE: 'true'
      CONTROL_CENTER_STREAMS_CACHE_MAX_BYTES_BUFFERING: 104857600
      PORT: 9021
    command:
      - bash
      - -c
      - |
        echo "Waiting two minutes for Kafka brokers to start and
               necessary topics to be available"
        sleep 60
        /etc/confluent/docker/run
    extra_hosts:
      - "host.docker.internal:172.17.0.1"
    networks:
      - backend

  axonserver:
    image: axoniq/axonserver:latest
    hostname: axonserver
    volumes:
      - axonserver-data:/data
      - axonserver-events:/eventdata
      - axonserver-config:/config:ro
    ports:
      - '8024:8024'
      - '8124:8124'
      - '8224:8224'

  config-server:
    build:
      context: ./configServer
    image: configserver:latest
    ports:
      - "8888:8888"
    networks:
      - backend
    environment:
      - spring.application.name=configServer
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 3s
      timeout: 3s
      retries: 10
      start_period: 5s

  service-discovery:
    build:
      context: ./ServiceDiscovery
    image: servicediscovery:latest
    ports:
      - "8761:8761"
    networks:
      - backend
    depends_on:
      config-server:
        condition: service_healthy
    environment:
      - spring.profiles.active=default
      - eureka.client.register-with-eureka=false
      - eureka.client.fetch-registry=false
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 3s
      timeout: 3s
      retries: 10
      start_period: 7s

  commerce-gateway:
    build:
      context: ./Gateway
    image: gateway:latest
    ports:
      - "8080:8080"
    depends_on:
      service-discovery:
        condition: service_healthy
    networks:
      - backend
    environment:
      - eureka.client.register-with-eureka=true
      - eureka.client.fetch-registry=true
      - spring.cloud.gateway.discovery.locator.enabled=true
      - spring.cloud.gateway.discovery.locator.lower-case-service-id=true
      - eureka.client.serviceUrl.defaultZone=http://service-discovery:8761/eureka/
      - flyway.schemas=gateway
      - flyway.defaultSchema=gateway
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 3s
      timeout: 3s
      retries: 10
      start_period: 8s

  product-service:
    build:
      context: ./ProductService
    image: productservice:latest
    ports:
      - "8081:8081"
    depends_on:
      commerce-gateway:
        condition: service_healthy
    networks:
      - backend
    environment:
      - server.port=8081
      - spring.application.name=productService
      - eureka.client.serviceUrl.defaultZone=http://service-discovery:8761/eureka/
      - spring.config.import=configserver:http://config-server:8888

  commerce-orders:
    build:
      context: ./OrderService
    image: orderservice:latest
    ports:
      - "8082:8082"
    depends_on:
      commerce-gateway:
        condition: service_healthy
    networks:
      - backend
    environment:
      - server.port=8082
      - spring.application.name=orderService
      - spring.kafka.bootstrap-servers:http://localhost:9092
      - eureka.client.serviceUrl.defaultZone=http://service-discovery:8761/eureka/
      - spring.config.import=configserver:http://config-server:8888

networks:
  axon-net:
  backend:
    driver: bridge
volumes:
  axonserver-data:
  axonserver-events:
  axonserver-config:

